/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
 * This code was autogenerated by RooClassFactory                            *
 *****************************************************************************/

// Your description goes here...

#include "Riostream.h"

#include "PowerLaw.h"
#include "RooAbsReal.h"
#include "RooAbsCategory.h"
#include <math.h>
#include "TMath.h"

// ClassImp(PowerLaw);

 PowerLaw::PowerLaw(const char *name, const char *title,
                        RooAbsReal& _x,
                        RooAbsReal& _k) :
   RooAbsPdf(name,title),
   x("x","x",this,_x),
   k("k","k",this,_k)
 {
 }


 PowerLaw::PowerLaw(const PowerLaw& other, const char* name) :
   RooAbsPdf(other,name),
   x("x",this,other.x),
   k("k",this,other.k)
 {
 }



 Double_t PowerLaw::evaluate() const
 {
   // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE
   if (x < 0)
     return 0; // disallow negative PDF values
   return pow(x, k);
 }



 Int_t PowerLaw::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* /*rangeName*/) const
 {
   // LIST HERE OVER WHICH VARIABLES ANALYTICAL INTEGRATION IS SUPPORTED,
   // ASSIGN A NUMERIC CODE FOR EACH SUPPORTED (SET OF) PARAMETERS
   // THE EXAMPLE BELOW ASSIGNS CODE 1 TO INTEGRATION OVER VARIABLE X
   // YOU CAN ALSO IMPLEMENT MORE THAN ONE ANALYTICAL INTEGRAL BY REPEATING THE matchArgs
   // EXPRESSION MULTIPLE TIMES

   if (matchArgs(allVars,analVars,x)) return 1 ;
   return 0 ;
 }



 Double_t PowerLaw::analyticalIntegral(Int_t code, const char* rangeName) const
 {
   // RETURN ANALYTICAL INTEGRAL DEFINED BY RETURN CODE ASSIGNED BY getAnalyticalIntegral
   // THE MEMBER FUNCTION x.min(rangeName) AND x.max(rangeName) WILL RETURN THE INTEGRATION
   // BOUNDARIES FOR EACH OBSERVABLE x

   if (code==1) {
     auto rgmin = x.min(rangeName);
     if (rgmin < 0) { // enforce x >= 0
       rgmin = 0;
     }
     return ((pow(x.max(rangeName), k) / (k + 1)) - (pow(rgmin, k) / (k + 1)));
     }
   return 0 ;
 }

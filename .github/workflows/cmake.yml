name: CMake

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug
  
jobs:
  get-root-ubuntu:
    runs-on: ubuntu-latest 
    steps:
      - name: Cache root install on ubuntu
        uses: actions/cache@v2
        with:
          key: root-ubuntu
          path: /usr/share/miniconda
      - name: Install root on ubuntu
        run: "conda install -c conda-forge root"
        
  get-root-macos:
    runs-on: macos-latest
    steps:
      - name: Cache root on MacOS
        uses: actions/cache@v2
        with:
          key: root-macos
          path: /usr/local/Cellar/root
      - name: Install root on MacOS
        run: |
          brew update
          brew install root
        
      
  example-1:
    name: Ex1 (${{ matrix.python-version }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
        python-version: ["3.7", "2.7"]
    steps:
      - uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}
      - name: Conda info
        shell: bash
        run: conda info
      - name: Conda list
        shell: pwsh
        run: conda list
        
  
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}
    needs: [get-root-ubuntu, get-root-macos]
    strategy:
      matrix:
        os: ['ubuntu-latest', 'macos-latest']
    steps:
    - name: Cache root install on ubuntu
      if: ${{ matrix.os == 'ubuntu-latest' }}
      uses: actions/cache@v2
      with:
        key: root-ubuntu
        path: /usr/share/miniconda
    - name: Activate conda env
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: conda activate
    - name: Cache root on MacOS
      if: ${{ matrix.os == 'macos-latest' }}
      uses: actions/cache@v2
      with:
        key: root-macos
        path: /usr/local/Cellar/root
    - uses: actions/checkout@v2
    
    - name: Configure Environment
      # Sets up necessary variables
      run: source env.sh

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
      
